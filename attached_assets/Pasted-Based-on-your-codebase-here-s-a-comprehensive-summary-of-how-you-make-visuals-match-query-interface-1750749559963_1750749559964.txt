Based on your codebase, here's a comprehensive summary of how you make visuals match query interface answers that you can use as a prompt for your other project's agent:

Visual-Query Interface Synchronization Pattern
Core Architecture:
1. Automatic Visualization Triggering

After every AI analysis response, automatically call createAutomaticVisualizations(data.data, analysisType) with a 500ms delay
This ensures visualizations are always generated when there's meaningful data to display
The system detects the analysis type from data.analysis_type field and creates appropriate charts
2. Analysis Type Detection & Chart Mapping

// Map analysis types to specific visualization functions
if (analysisType === "failure_analysis" && data.failure_categories) {
    createFailureAnalysisCharts(data);
} else if (analysisType === "anomaly_detection" && data.activities_with_most_anomalies) {
    createAnomalyAnalysisCharts(data);
} else if (analysisType === "case_comparison" && data.cases) {
    createCaseComparisonCharts(data);
}
3. Data Structure Consistency

The AI query interface returns structured data with specific fields that match visualization expectations
Each analysis function returns data in a standardized format with consistent field names
Example: activities_with_most_failures, failure_categories, temporal_analysis
Key Implementation Strategies:
1. Function-Calling Architecture

Use OpenAI function calling to route queries to specific analysis functions
Each function returns both the data AND the analysis_type identifier
This ensures the visualization system knows exactly what charts to create
2. Standardized Data Formats

# Example from failure analysis
return {
    "analysis_type": "failure_analysis",
    "activities_with_most_failures": activity_details,
    "failure_categories": category_details,
    "temporal_analysis": temporal_data  # for time-based queries
}
3. Dynamic Chart Creation

Use a centralized ensureChartContainer() function to create/clear chart areas
Generate multiple related charts automatically (pie charts, bar charts, scatter plots)
Size charts appropriately (48% width for side-by-side, 100% for single charts)
4. Context-Aware Visualization Selection

// Detect what data is available and create appropriate charts
if (data.failure_categories) {
    // Create pie chart for categories + bar chart for affected activities
}
if (data.temporal_analysis && data.temporal_analysis.hour_anomaly_distribution) {
    // Create temporal bar chart
}
Critical Success Factors:
1. Consistent Field Naming

Use exact same field names between backend analysis functions and frontend visualization code
Example: activities_with_most_failures is used consistently across Python and JavaScript
2. Automatic Chart Container Management

Clear previous charts before creating new ones
Insert chart container dynamically after the analysis explanation
Use proper CSS styling for responsive layout
3. Data Validation & Fallbacks

Check if required data fields exist before attempting to create charts
Provide meaningful fallbacks when data is insufficient
Handle edge cases gracefully (empty datasets, missing fields)
4. Multiple Chart Types Per Analysis

For failure analysis: Create both categorical pie charts AND activity bar charts
For case comparison: Create 5 separate comparison charts (activities, duration, failures, etc.)
For temporal analysis: Create time-based distribution charts
Implementation Template for Your Agent:
1. Ensure your AI analysis functions return data with consistent `analysis_type` fields
2. Create a mapping between analysis types and visualization functions
3. Implement automatic chart generation after every AI response
4. Use standardized data formats that match both your backend analysis and frontend visualization needs
5. Create multiple complementary charts per analysis type to provide comprehensive visual insights
6. Implement proper error handling and data validation in your chart creation functions
The key is automatic synchronization - whenever the AI provides an analysis, the visualization system immediately detects the data structure and creates appropriate charts without any manual intervention. This creates a seamless experience where every query gets both textual analysis AND visual representation automatically.

